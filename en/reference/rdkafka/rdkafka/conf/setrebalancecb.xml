<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<refentry xml:id="rdkafka-conf.setrebalancecb" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>RdKafka\Conf::setRebalanceCb</refname>
  <refpurpose>Set rebalance callback</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>void</type><methodname>RdKafka\Conf::setRebalanceCb</methodname>
   <methodparam><type>callable</type><parameter>callback</parameter></methodparam>
  </methodsynopsis>
  <para>
   Set rebalance callback for use with coordinated consumer group balancing.
  </para>
  <para>
   Registering a <code>rebalance_cb</code> turns off librdkafka's automatic partition assignment/revocation and instead delegates that responsibility to the application's <code>rebalance_cb</code>.
  </para>
  <para>
   The rebalance callback is responsible for updating librdkafka's assignment set based on the two events <constant>RD_KAFKA_RESP_ERR__ASSIGN_PARTITIONS</constant> and <constant>RD_KAFKA_RESP_ERR__REVOKE_PARTITIONS</constant> but should also be able to handle arbitrary rebalancing failures where <parameter>err</parameter> is neither of those.
  </para>
  <note>
   <para>
    In this latter case (arbitrary error), the application must <code>$kafka->assign(NULL)</code> to synchronize state.
   </para>
  </note>
  <para>
   Without a rebalance callback this is done automatically by librdkafka but registering a rebalance callback gives the application flexibility in performing other operations along with the assinging/revocation, such as fetching offsets from an alternate location (on assign) or manually committing offsets (on revoke).
  </para>
  <para>
   The example below shows the application's responsibilities.
  </para>

 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>callback</parameter> (<type>callable</type>)</term>
    <listitem>
     <para>
      A callable with the following signature:
      <programlisting role="php">
<![CDATA[
<?php
/**
 * @param RdKafka\KafkaConsumer $kafka
 * @param int $err
 * @param RdKafka\TopicPartition[] $partitions
 */
function (RdKafka\KafkaConsumer $kafka, int $err, array $partitions);
]]>
      </programlisting>
      The <parameter>err</parameter> parameter is set to either <constant>RD_KAFKA_RESP_ERR__ASSIGN_PARTITIONS</constant> or <constant>RD_KAFKA_RESP_ERR__REVOKE_PARTITIONS</constant> (or an unexpected error). The <parameter>partitions</parameter> parameter is an array of <classname>RdKafka\TopicPartition</classname>, representing the full partition set that was either assigned or revoked.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns no value.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>RdKafka\Conf::setRebalanceCb</function> example</title>
   <programlisting role="php">
<![CDATA[
<?php
$conf->setRebalanceCb(function (RdKafka\KafkaConsumer $kafka, $err, array $partitions = null) {
    switch ($err) {
        case RD_KAFKA_RESP_ERR__ASSIGN_PARTITIONS:
            // application may load offets from arbitrary external
            // storage here and update partitions
            $kafka->assign($partitions);
            break;

         case RD_KAFKA_RESP_ERR__REVOKE_PARTITIONS:
             if ($manual_commits) {
                 // Optional explicit manual commit
                 $kafka->commit($partitions);
             }
             $kafka->assign(NULL);
             break;

         default:
            handle_unlikely_error($err);
            $kafka->assign(NULL); // sync state
            break;
    }
}
?>
]]>
   </programlisting>
  </example>
 </refsect1>


</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
