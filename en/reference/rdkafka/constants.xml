<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->

<appendix xml:id="rdkafka.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>
  <variablelist>
   <varlistentry xml:id="constant.rd-kafka-consumer">
    <term>
     <constant>RD_KAFKA_CONSUMER</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-offset-beginning">
    <term>
     <constant>RD_KAFKA_OFFSET_BEGINNING</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Start consuming from beginning of kafka partition queue: oldest msg.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-offset-end">
    <term>
     <constant>RD_KAFKA_OFFSET_END</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Start consuming from end of kafka partition queue: next msg.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-offset-stored">
    <term>
     <constant>RD_KAFKA_OFFSET_STORED</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Start consuming from offset retrieved from offset store.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-partition-ua">
    <term>
     <constant>RD_KAFKA_PARTITION_UA</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      The unassigned partition is used by the producer API for messages that should be partitioned using the configured or default partitioner.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-producer">
    <term>
     <constant>RD_KAFKA_PRODUCER</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-version">
    <term>
     <constant>RD_KAFKA_VERSION</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--begin">
    <term>
     <constant>RD_KAFKA_RESP_ERR__BEGIN</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--bad-msg">
    <term>
     <constant>RD_KAFKA_RESP_ERR__BAD_MSG</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Bad message format
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--bad-compression">
    <term>
     <constant>RD_KAFKA_RESP_ERR__BAD_COMPRESSION</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Invalid compressed data
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--destroy">
    <term>
     <constant>RD_KAFKA_RESP_ERR__DESTROY</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Broker handle destroyed
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--fail">
    <term>
     <constant>RD_KAFKA_RESP_ERR__FAIL</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Communication failure with broker
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--transport">
    <term>
     <constant>RD_KAFKA_RESP_ERR__TRANSPORT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Broker transport failure
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--crit-sys-resource">
    <term>
     <constant>RD_KAFKA_RESP_ERR__CRIT_SYS_RESOURCE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Critical system resource failure
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--resolve">
    <term>
     <constant>RD_KAFKA_RESP_ERR__RESOLVE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Host resolution failure
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--msg-timed-out">
    <term>
     <constant>RD_KAFKA_RESP_ERR__MSG_TIMED_OUT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Message timed out
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--partition-eof">
    <term>
     <constant>RD_KAFKA_RESP_ERR__PARTITION_EOF</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: No more messages
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--unknown-partition">
    <term>
     <constant>RD_KAFKA_RESP_ERR__UNKNOWN_PARTITION</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Unknown partition
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--fs">
    <term>
     <constant>RD_KAFKA_RESP_ERR__FS</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: File or filesystem error
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--unknown-topic">
    <term>
     <constant>RD_KAFKA_RESP_ERR__UNKNOWN_TOPIC</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Unknown topic
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--all-brokers-down">
    <term>
     <constant>RD_KAFKA_RESP_ERR__ALL_BROKERS_DOWN</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: All broker connections are down
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--invalid-arg">
    <term>
     <constant>RD_KAFKA_RESP_ERR__INVALID_ARG</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Invalid argument or configuration
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--timed-out">
    <term>
     <constant>RD_KAFKA_RESP_ERR__TIMED_OUT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Timed out
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--queue-full">
    <term>
     <constant>RD_KAFKA_RESP_ERR__QUEUE_FULL</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Queue full
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--isr-insuff">
    <term>
     <constant>RD_KAFKA_RESP_ERR__ISR_INSUFF</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: ISR count insufficient
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--node-update">
    <term>
     <constant>RD_KAFKA_RESP_ERR__NODE_UPDATE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Broker node update
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--ssl">
    <term>
     <constant>RD_KAFKA_RESP_ERR__SSL</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: SSL error
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--wait-coord">
    <term>
     <constant>RD_KAFKA_RESP_ERR__WAIT_COORD</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Waiting for coordinator
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--unknown-group">
    <term>
     <constant>RD_KAFKA_RESP_ERR__UNKNOWN_GROUP</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Unknown group
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--in-progress">
    <term>
     <constant>RD_KAFKA_RESP_ERR__IN_PROGRESS</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Operation in progress
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--prev-in-progress">
    <term>
     <constant>RD_KAFKA_RESP_ERR__PREV_IN_PROGRESS</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Previous operation in progress
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--existing-subscription">
    <term>
     <constant>RD_KAFKA_RESP_ERR__EXISTING_SUBSCRIPTION</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Existing subscription
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--assign-partitions">
    <term>
     <constant>RD_KAFKA_RESP_ERR__ASSIGN_PARTITIONS</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Assign partitions
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--revoke-partitions">
    <term>
     <constant>RD_KAFKA_RESP_ERR__REVOKE_PARTITIONS</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Revoke partitions
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--conflict">
    <term>
     <constant>RD_KAFKA_RESP_ERR__CONFLICT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Conflicting use
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--state">
    <term>
     <constant>RD_KAFKA_RESP_ERR__STATE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Erroneous state
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--unknown-protocol">
    <term>
     <constant>RD_KAFKA_RESP_ERR__UNKNOWN_PROTOCOL</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Unknown protocol
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--not-implemented">
    <term>
     <constant>RD_KAFKA_RESP_ERR__NOT_IMPLEMENTED</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Not implemented
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--authentication">
    <term>
     <constant>RD_KAFKA_RESP_ERR__AUTHENTICATION</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: Authentication failure
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--no-offset">
    <term>
     <constant>RD_KAFKA_RESP_ERR__NO_OFFSET</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Local: No offset stored
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err--end">
    <term>
     <constant>RD_KAFKA_RESP_ERR__END</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-unknown">
    <term>
     <constant>RD_KAFKA_RESP_ERR_UNKNOWN</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Unknown broker error
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-offset-out-of-range">
    <term>
     <constant>RD_KAFKA_RESP_ERR_OFFSET_OUT_OF_RANGE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Offset out of range
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-invalid-msg">
    <term>
     <constant>RD_KAFKA_RESP_ERR_INVALID_MSG</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Invalid message
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-unknown-topic-or-part">
    <term>
     <constant>RD_KAFKA_RESP_ERR_UNKNOWN_TOPIC_OR_PART</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Unknown topic or partition
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-invalid-msg-size">
    <term>
     <constant>RD_KAFKA_RESP_ERR_INVALID_MSG_SIZE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Invalid message size
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-leader-not-available">
    <term>
     <constant>RD_KAFKA_RESP_ERR_LEADER_NOT_AVAILABLE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Leader not available
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-not-leader-for-partition">
    <term>
     <constant>RD_KAFKA_RESP_ERR_NOT_LEADER_FOR_PARTITION</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Not leader for partition
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-request-timed-out">
    <term>
     <constant>RD_KAFKA_RESP_ERR_REQUEST_TIMED_OUT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Request timed out
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-broker-not-available">
    <term>
     <constant>RD_KAFKA_RESP_ERR_BROKER_NOT_AVAILABLE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Broker not available
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-replica-not-available">
    <term>
     <constant>RD_KAFKA_RESP_ERR_REPLICA_NOT_AVAILABLE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Replica not available
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-msg-size-too-large">
    <term>
     <constant>RD_KAFKA_RESP_ERR_MSG_SIZE_TOO_LARGE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Message size too large
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-stale-ctrl-epoch">
    <term>
     <constant>RD_KAFKA_RESP_ERR_STALE_CTRL_EPOCH</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: StaleControllerEpochCode
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-offset-metadata-too-large">
    <term>
     <constant>RD_KAFKA_RESP_ERR_OFFSET_METADATA_TOO_LARGE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Offset metadata string too large
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-network-exception">
    <term>
     <constant>RD_KAFKA_RESP_ERR_NETWORK_EXCEPTION</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Broker disconnected before response received
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-group-load-in-progress">
    <term>
     <constant>RD_KAFKA_RESP_ERR_GROUP_LOAD_IN_PROGRESS</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Group coordinator load in progress
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-group-coordinator-not-available">
    <term>
     <constant>RD_KAFKA_RESP_ERR_GROUP_COORDINATOR_NOT_AVAILABLE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Group coordinator not available
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-not-coordinator-for-group">
    <term>
     <constant>RD_KAFKA_RESP_ERR_NOT_COORDINATOR_FOR_GROUP</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Not coordinator for group
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-topic-exception">
    <term>
     <constant>RD_KAFKA_RESP_ERR_TOPIC_EXCEPTION</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Invalid topic
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-record-list-too-large">
    <term>
     <constant>RD_KAFKA_RESP_ERR_RECORD_LIST_TOO_LARGE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Message batch larger than configured server segment size
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-not-enough-replicas">
    <term>
     <constant>RD_KAFKA_RESP_ERR_NOT_ENOUGH_REPLICAS</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Not enough in-sync replicas
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-not-enough-replicas-after-append">
    <term>
     <constant>RD_KAFKA_RESP_ERR_NOT_ENOUGH_REPLICAS_AFTER_APPEND</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Message(s) written to insufficient number of in-sync replicas
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-invalid-required-acks">
    <term>
     <constant>RD_KAFKA_RESP_ERR_INVALID_REQUIRED_ACKS</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Invalid required acks value
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-illegal-generation">
    <term>
     <constant>RD_KAFKA_RESP_ERR_ILLEGAL_GENERATION</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Specified group generation id is not valid
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-inconsistent-group-protocol">
    <term>
     <constant>RD_KAFKA_RESP_ERR_INCONSISTENT_GROUP_PROTOCOL</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Inconsistent group protocol
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-invalid-group-id">
    <term>
     <constant>RD_KAFKA_RESP_ERR_INVALID_GROUP_ID</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Invalid group.id
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-unknown-member-id">
    <term>
     <constant>RD_KAFKA_RESP_ERR_UNKNOWN_MEMBER_ID</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Unknown member
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-invalid-session-timeout">
    <term>
     <constant>RD_KAFKA_RESP_ERR_INVALID_SESSION_TIMEOUT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Invalid session timeout
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-rebalance-in-progress">
    <term>
     <constant>RD_KAFKA_RESP_ERR_REBALANCE_IN_PROGRESS</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Group rebalance in progress
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-invalid-commit-offset-size">
    <term>
     <constant>RD_KAFKA_RESP_ERR_INVALID_COMMIT_OFFSET_SIZE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Commit offset data size is not valid
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-topic-authorization-failed">
    <term>
     <constant>RD_KAFKA_RESP_ERR_TOPIC_AUTHORIZATION_FAILED</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Topic authorization failed
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-group-authorization-failed">
    <term>
     <constant>RD_KAFKA_RESP_ERR_GROUP_AUTHORIZATION_FAILED</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Group authorization failed
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-resp-err-cluster-authorization-failed">
    <term>
     <constant>RD_KAFKA_RESP_ERR_CLUSTER_AUTHORIZATION_FAILED</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Broker: Cluster authorization failed
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-conf-unknown">
    <term>
     <constant>RD_KAFKA_CONF_UNKNOWN</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-conf-invalid">
    <term>
     <constant>RD_KAFKA_CONF_INVALID</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-conf-ok">
    <term>
     <constant>RD_KAFKA_CONF_OK</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-msg-partitioner-random">
    <term>
     <constant>RD_KAFKA_MSG_PARTITIONER_RANDOM</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      The random partitioner. This was the default partitioner in librdkafka 0.8. Assigns partition randomly.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-msg-partitioner-consistent">
    <term>
     <constant>RD_KAFKA_MSG_PARTITIONER_CONSISTENT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      The consistent partitioner. Uses consistent hashing to map identical keys onto identical partitions. Uses CRC32 as hashing function. Messages with no key or empty key are always assigned to the same partition.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-msg-partitioner-consistent-random">
    <term>
     <constant>RD_KAFKA_MSG_PARTITIONER_CONSISTENT_RANDOM</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      The consistent random partitioner. Uses consistent hashing to map identical keys onto identical partitions. Uses CRC32 as hashing function. Messages with no key or empty key are randomly partitioned.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-msg-partitioner-murmur2">
    <term>
     <constant>RD_KAFKA_MSG_PARTITIONER_MURMUR2</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      The murmur2 partitioner. Uses consistent hashing to map identical keys onto identical partitions. Uses Java Producer compatible Murmur2 as hashing function. Messages with no key or empty key are always assigned to the same partition.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-msg-partitioner-murmur2-random">
    <term>
     <constant>RD_KAFKA_MSG_PARTITIONER_MURMUR2_RANDOM</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      The murmur2 random partitioner. Uses consistent hashing to map identical keys onto identical partitions. Uses Java Producer compatible Murmur2 as hashing function. Messages with no key or empty key are randomly partitioned.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-log-print">
    <term>
     <constant>RD_KAFKA_LOG_PRINT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      The print logger. Prints messages to stderr.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-log-syslog">
    <term>
     <constant>RD_KAFKA_LOG_SYSLOG</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      The syslog logger. Sends messages to syslog.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-log-syslog-print">
    <term>
     <constant>RD_KAFKA_LOG_SYSLOG_PRINT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      The syslog-print partitioner. Sends messages to syslog and prints them to stderr.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-purge-f-queue">
    <term>
     <constant>RD_KAFKA_PURGE_F_QUEUE</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Purge messages in internal queues.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-purge-f-inflight">
    <term>
     <constant>RD_KAFKA_PURGE_F_INFLIGHT</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Purge messages in-flight to or from the broker.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-purge-f-non-blocking">
    <term>
     <constant>RD_KAFKA_PURGE_F_NON_BLOCKING</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Don't wait for background thread queue purging to finish.
     </simpara>
    </listitem>
   </varlistentry>
   <varlistentry xml:id="constant.rd-kafka-msg-f-block">
    <term>
     <constant>RD_KAFKA_MSG_F_BLOCK</constant>
     (<type>integer</type>)
    </term>
    <listitem>
     <simpara>
      Available from rdkafka 3.1.3, will block produce*() on message queue full.
     </simpara>
    </listitem>
   </varlistentry>
  </variablelist>
 </para>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
